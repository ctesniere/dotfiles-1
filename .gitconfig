[user]

	name = Cedric TESNIERE
	email = tesniere.cedric@gmail.com

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = "~/.gitignore"
	attributesfile = "~/.gitattributes"

	editor = subl -n -w
	autocrlf = input # Prevent line ending issues
	compression = -1

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

[pull]

	rebase = true

[push]

	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = current

	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[log]

	abbrevCommit = true

[rebase]

	autoStash = true

[credential]

	helper = osxkeychain

[rerere]

	enabled = true

[grep]

	extendedRegexp = true

[commit]

	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = false

[diff "bin"]

	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[alias]

	# status
	st = status -sb

	# branch
	br = branch -vv -a
	brDF = "!f() { git branch -D $1 && for r in $(git remote); do git push $r :$1; done; }; f"
	co = checkout
	cob = checkout -b

	# check & refresh
	fetchall = fetch --all --tag --prune
	refresh = "!f() { git checkout $1 && git pull common $1 && git push origin $1; }; f"

	# Log
	l = log --date-order --date=iso --graph --full-history --pretty=format:'%C(red)%h %C(cyan)%ad%x08%x08%x08%x08%x08%x08%x08%x08%x08 %C(bold blue)%aN%C(reset) %C(auto)%d %C(reset)%s'
	ll = log --date-order --date=iso --graph --full-history --all --pretty=format:'%C(red)%h %C(cyan)%ad%x08%x08%x08%x08%x08%x08%x08%x08%x08 %C(bold blue)%aN%C(reset) %C(auto)%d %C(reset)%s'
	who = shortlog -sne
	diffc = diff --cached
	diffs = diff --stat

	# Annuler le dernier commit
	undo = git reset --soft HEAD^

	# Commit
	ci = commit
	cdraft = !git add -A && git commit -m draft

	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Rewriting history
	fixup = "!sh -c 'COMMIT=$(git rev-parse $1) && git commit --fixup=$COMMIT && git rebase -i --autostash --autosquash $COMMIT~1' -"
	rh = "!f() { git reset --hard $1; }; f"
	## Interactive rebase with the given number of latest commits
	reb = "!f() { git rebase -i HEAD~$1; }; f"
	rebconti = rebase --continue
	rebabort = rebase --abort
	rebdevelop = rebase -i develop

	# Gitk
	k = !gitk&
	kll = !gitk --all&

	# Search
	## Find branches containing sha1 commit
	fbr = "!f() { git branch -a --contains $1; }; f"
	## Find tags containing commit
	ftg = "!f() { git describe --always --contains $1; }; f"
	## Find commits by source code
	fci = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	## Find commits by commit message
	fmsg = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --no-merges -i --grep=$1; }; f"
	## Search commits by author
	fauthor = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --author=\"$1\"; }; f"

	# Other
	## Launch test for all commits, todo : dectect maven, gradle, ...
	rebtest = "!f() { git rebase -i --exec 'mvn clean test' $1; }; f"
	clean = !git clean -df

	# List contributors with number of commits
	contributors = shortlog --summary --numbered


	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"


	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1\" -C HEAD; }; f"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]

	# Detect copies as well as renames
	renames = copies
	# Enable an experimental heuristic that shifts the hunk boundary in an
	# attempt to make the resulting patch easier to read.
	indentHeuristic = true

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]

	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = matching
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"

[includeIf "gitdir:~/workspace/"]

	path = ~/workspace/.gitconfig-workspace
